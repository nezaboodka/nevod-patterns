@require "Basic.Number.np";
@require "Basic.Time.np";
@require "Basic.Duration.np";

@namespace Basic.Date {
    @search @pattern Target = {
        DateExtractor,
        StrictRelative + Space + DateExtractor,
        SpecialDay,
        This,
        LastDate,
        NextDate,
        SingleWeekDay,
        WeekDayOfMonth,
        SpecialDayWithNum,
        RelativeWeekDay,
        Date,
        ForThe,
        WeekDayAndDayOfMonth,
        WeekDayAndDay,
        OrdinalWeekDay,
        MonthWithOrdinalDay,
        RelativeDurationDate,
        On,
        RelaxedOn
    };
    
    DateExtractor = {
        DateExtractor1,
        DateExtractor3,
        DateExtractor4,
        DateExtractor5,
        DateExtractor6,
        DateExtractor7L7S,
        DateExtractor8,
        DateExtractor9L9S,
        DateExtractorA
    };
    
    // Root
    // (Sunday,)? April 5 or (Sunday,)? April 5, 2016
    // \b({WeekDayRegex}\s*[,-]?\s*)?(({MonthRegex}[\.]?\s*[/\\.,-]?\s*{DayRegex})|(\({MonthRegex}\s*[-.]\s*{DayRegex}\)))(\s*\(\s*{WeekDayRegex}\s*\))?({DateExtractorYearTermRegex}\b)?
    DateExtractor1 =
        ?(WeekDay + ?Space + ?({',', '-'} + ?Space)) + 
        {
            MonthName + ?'.' + ?Space + ?{'\', '/', '.', ',', '-'} + ?Space + Day,
            '(' + MonthName + ?Space + ?{'-', '.'} + ?Space + Day + ')'
        }
        + ?(?Space + '(' + ?Space + WeekDay + ?Space + ')') + ?DateExtractorYearTerm;
    
    // Root
    // (Sunday,)? 6th of April
    // \b({WeekDayRegex}(\s+|\s*,\s*))?{DayRegex}[\.]?(\s+|\s*,\s*|\s+of\s+|\s*-\s*){MonthRegex}[\.]?((\s+in)?{DateExtractorYearTermRegex})?\b
    DateExtractor3 = ?(WeekDay + SpaceOrComma) + Day + ?'.' + {SpaceOrComma, Space + 'of' + Space, ?Space + '-' + ?Space}
        + MonthName + ?'.' + ?(?(Space + 'in') + DateExtractorYearTerm);
    
    // Root
    // 3-23-2017
    // \b{MonthNumRegex}\s*[/\\\-]\s*{DayRegex}[\.]?\s*[/\\\-]\s*{DateYearRegex}
    DateExtractor4 = Month + Delim + Day + Delim + Year
    @where {
        Delim = {'/', '\', '-'};
    };
    
    // Root
    // 23-3-2015
    // \b{DayRegex}\s*[/\\\-\.]\s*({MonthNumRegex}|{MonthRegex})\s*[/\\\-\.]\s*{DateYearRegex}(?!\s*[/\\\-\.]\s*\d+)
    // > # The final lookahead in DateExtractor5 avoids extracting as date "10/1-11" from an input like "10/1-11/2/2017"
    DateExtractor5 = Day + ?Space + Delim + ?Space + { MonthName, Month } + ?Space + Delim + ?Space 
        + { Year, ~ Year + ?Space + Delim + ?Space + Num }
    @where {
        Delim = {'/', '\', '-', '.'};
    };
    
    // Root
    // on (Sunday,)? 1.3
    // (?<={DatePreposition}\s+)({StrictRelativeRegex}\s+)?({WeekDayRegex}\s+)?{MonthNumRegex}[\-\.]{DayRegex}(?![%])\b
    DateExtractor6 = Result @inside (DatePreposition + Space + Result)
    @where {
        Result = ?(StrictRelative + Space) + ?(WeekDay + Space) + Month + {'-', '.'} + { Day, ~ Day + '%' };
    };
    
    // Root
    // DateExtractor7L: 
    //  "(Sunday,)? 7/23, 2018", year part is required
    //  \b({WeekDayRegex}\s+)?{MonthNumRegex}\s*/\s*{DayRegex}{DateExtractorYearTermRegex}(?![%])\b
    // DateExtractor7S: 
    //  "(Sunday,)? 7/23", year part is not required
    //  \b({WeekDayRegex}\s+)?{MonthNumRegex}\s*/\s*{DayRegex}(?![%])\b
    // > # We have both the long and short Regex because we would like to catch both "11/20, 12" and "11/20, 12/20"
    // Пришлось объединить в один шаблон для обработки случая выше (цитата из файла шаблонов Recognizers).
    DateExtractor7L7S = ?(WeekDay + Space) + Month + ?Space + '/' + ?Space + { Day, ~ Day + '%' }
        + ?{ DateExtractorYearTerm, ~ DateExtractorYearTerm + {'%', '/'} };
    
    // Root
    // FYI: "on friday 7-6" совпадет как с DateExtractor8, так и с DateExtractor6
    // on (Sunday,)? 24-12
    // (?<={DatePreposition}\s+)({StrictRelativeRegex}\s+)?({WeekDayRegex}\s+)?{DayRegex}[\\\-]{MonthNumRegex}(?![%])\b
    DateExtractor8 = Result @inside (DatePreposition + Space + Result)
    @where {
        Result = ?(StrictRelative + Space) + ?(WeekDay + Space) + Day + {'\', '-'}  + { Month, ~ Month + '%' };
    };
    
    // Root
    // "(Sunday,)? 23/7, 2018", year part is required
    // Пришлось объединить в один шаблон по той же самой причине, что и DateExtractor7L7S
    // \b({WeekDayRegex}\s+)?{DayRegex}\s*/\s*{MonthNumRegex}{DateExtractorYearTermRegex}(?![%])\b
    // \b({WeekDayRegex}\s+)?{DayRegex}\s*/\s*{MonthNumRegex}(?![%])\b
    DateExtractor9L9S = ?(WeekDay + Space) + Day + ?Space + '/' + ?Space + { Month, ~ Month + '%' }
        + ?{ DateExtractorYearTerm, ~ DateExtractorYearTerm + {'%', '/'} };
    
    // Root
    // (Sunday,)? 2015-12-23
    // \b({WeekDayRegex}\s+)?{BaseDateTime.FourDigitYearRegex}\s*[/\\\-\.]\s*({MonthNumRegex}|{MonthRegex})\s*[/\\\-\.]\s*{DayRegex}
    DateExtractorA = ?(WeekDay + Space) + Num(4) + ?Space + Delim + ?Space + { MonthName, Month } + ?Space + Delim
        + ?Space + Day
    @where {
        Delim = {'/', '\', '-', '.'};
    };
    
    // Root
    // extract "12" from "on 12"
    // (?<=\bon\s+)({DayRegex}s?)\b
    On = Day @inside ('on' + Space + Day);

    // Root
    // extract "12th" from "on/at/in 12th"
    RelaxedOn = OrdinalDay @inside ({'on', 'at', 'in'} + Space + OrdinalDay);
    
    // Root
    // "the day before yesterday", "previous day", "today", "yesterday", "tomorrow"
    SpecialDay = {
        ?('the' + Space) + 'day before yesterday',
        ?('the' + Space) + 'day after' + Space + Tomorrow,
        'the day' + Space + { BeforeAfter, ~ BeforeAfter + Space + 'day' },
        ?('the' + Space) + { Relative, 'my' } + Space + 'day',
        'yesterday', Tomorrow, 'today'
    } @where {
        BeforeAfter = {'before', 'after'};
    };
    
    // Root
    // "this Monday", "Tuesday of this week"
    // \b(this(\s*week{PrefixWeekDayRegex}?)?\s*{WeekDayRegex})|({WeekDayRegex}((\s+of)?\s+this\s*week))\b
    This = {
        'this' + ?(?Space + 'week' + ?PrefixWeekDay) + ?Space + WeekDay,
        WeekDay + ?(Space + 'of') + Space + 'this' + Space + 'week'
    };
    
    // Root
    // "last/previous Monday", "Monday of last week"
    // \b({PreviousPrefixRegex}(\s*week{PrefixWeekDayRegex}?)?\s*{WeekDayRegex})|({WeekDayRegex}(\s+(of\s+)?last\s*week))\b
    LastDate = {
        PreviousPrefix + ?(Space + 'week' + ?PrefixWeekDay) + ?Space + WeekDay,
        WeekDay + Space + ?('of' + Space) + 'last week'
    };
    
    // Root
    // "next/following Monday", "Monday of next week"
    // \b({NextPrefixRegex}(\s*week{PrefixWeekDayRegex}?)?\s*{WeekDayRegex})|((on\s+)?{WeekDayRegex}((\s+of)?\s+(the\s+following|(the\s+)?next)\s*week))\b
    NextDate = {
        NextPrefix + ?(Space + 'week' + ?PrefixWeekDay) + Space + WeekDay,
        ?('on' + Space) + WeekDay + ?(Space + 'of') + Space + { 'the following', ?'the ' + 'next' } + Space + 'week'
    };
    
    // Root
    // "Sunday", "Weds"
    // \b(?<weekday>(?<!(easter|palm)\s+)sunday|(?<!easter\s+)saturday|(?<!(easter|cyber)\s+)monday|mon|(?<!black\s+)friday|fri|(?:tues?|thurs?)(day)?|thu|wedn(esday)?|weds?|((?<=on\s+)(sat|sun)))\b
    SingleWeekDay = {
        'sunday' @outside {'easter', 'palm'} + Space + 'sunday',
        'saturday' @outside 'easter' + Space + 'saturday',
        Monday @outside {'easter', 'cyber'} + Space + Monday,
        Friday @outside 'black' + Space + Friday,
        'tues', 'tuesday',
        'thu', 'thurs', 'thursday',
        'wedn', 'wednesday', 'weds',
        SatSun @inside ('on' + Space + SatSun)
    } @where {
        Monday = {'monday', 'mon'};
        Friday = {'friday', 'fri'};
        SatSun = {'sat', 'sun'};
    };
    
    // Root
    // "2nd Monday of April"
    // (?<wom>(the\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\s+(week\s+{MonthSuffixRegex}[\.]?\s+(on\s+)?{WeekDayRegex}|{WeekDayRegex}\s+{MonthSuffixRegex}))
    WeekDayOfMonth = ?('the' + Space)
        + {'first', '1st', 'second', '2nd', 'third', '3rd', 'fourth', '4th', 'fifth', '5th', 'last'}
        + Space + {
            'week' + Space + MonthSuffix + ?'.' + Space + ?('on' + Space) + WeekDay,
            WeekDay + Space + MonthSuffix
        };
    
    // Root
    // "on the 12th"
    // (?=\b(on|at)\s+the\s+){DayRegex}\b
    // см. ForThe(R)
    // SpecialDate = {'on', 'at'} + Space + 'the' + Space + Day;
    
    
    // Root
    // "two days from today", "five days from tomorrow"
    // \b((?<number>{WrittenNumRegex})\s+days?\s+from\s+(?<day>yesterday|tomorrow|tmr|today))\b
    SpecialDayWithNum = WrittenNum + Space + {'day', 'days'} + Space + 'from' + Space + {'yesterday', 'tomorrow', 'tmr', 'today'};
    
    // Root
    // "three Monday from now"
    // \b({WrittenNumRegex}\s+{WeekDayRegex}\s+(from\s+now|later))\b
    RelativeWeekDay = WrittenNum + Space + WeekDay + Space + {'from now', 'later'};
    
    // Root
    // Handling cases like 'for the 25th'
    // \b((((?<=for\s+)the\s+{FlexibleDayRegex})|((?<=on\s+)(the\s+)?{FlexibleDayRegex}(?<=(st|nd|rd|th))))(?<end>\s*(,|\.(?!\d)|!|\?|$)))
    ForThe = Result @inside ({'for', 'on'} + Space + Result + ?Space + {',', '.', ~'.' + Num, '!', '?', End})
    @where {
        Result = ?('the' + Space) + { Day, Basic.Number.IntegerNumber };
    };
    
    // Root
    // Handling cases like 'Thursday the 21st', which both 'Thursday' and '21st' refer to a same date
    // \b{WeekDayRegex}\s+(the\s+{FlexibleDayRegex})\b
    WeekDayAndDayOfMonth = WeekDay + Space + 'the' + Space + { Day, Basic.Number.IntegerNumber };
    
    // Root
    // Handling cases like 'Monday 21', which both 'Monday' and '21' refer to the same date
    // \b{WeekDayRegex}\s+(?!(the)){DayRegex}(?!([-:]|(\s+({AmDescRegex}|{PmDescRegex}|{OclockRegex}))))\b
    WeekDayAndDay = WeekDay + Space + { Day, ~ Day + { { '-', ':' }, Space + {Basic.Time.AmDesc, Basic.Time.PmDesc, Basic.Time.Oclock} } };
    
    // Root
    // 'first Monday', 'second Tuesday'
    OrdinalWeekDay = MonthlyOrdinal + Space + WeekDay;
    
    // Root
    MonthWithOrdinalDay = {
        ?(WeekDay + Separators) + 
        { 
            // 'may the eleventh', 'Jan twenty two'
            MonthEnd + Space + { Basic.Number.IntegerNumber, Num(2) },
            Basic.Number.IntegerNumber + Space + OfMonth
        } + ?(Separators + Year),
        // '20th of the next month
        ?('the' + Space) + Basic.Number.IntegerNumber + Space + RelativeMonth
    } @where {
        Year = { Num(4), YearSuffix };
        Separators = [1+ {Space, ','}];
    };
    
    // Root
    RelativeDurationDate = {
        ?('in' + Space) + Basic.Duration.NumberWithUnit + ?(Space + { Later, Ago })
    };


    // ----------------------------------------------
    
    
    // (\s*((,?\s*on)|[-—–]))
    PrefixWeekDay = ?Space + { ?',' + ?Space + 'on', '-', '—', '–' };
    
    // ({LastNegPrefix}last|previous|{PastPrefixRegex})\b
    PreviousPrefix = { LastNotVerb, 'previous', PastPrefix };
    
    Tomorrow = {'tomorrow', 'tmr'};
    
    DatePreposition = {'on', 'in'};
    
    SpaceOrComma = {Space, ?Space + ',' + ?Space};
    
    WeekDay = { 
        'mon', 'monday', 'mondays', 
        'tue', 'tues', 'tuesday', 'tuesdays',
        'wed', 'wedn', 'weds', 'wednesday', 'wednesdays',
        'thu', 'thur', 'thurs', 'thursday', 'thursdays',
        'fri', 'friday', 'fridays',
        'sat', 'saturday', 'saturdays', 
        'sun', 'sunday', 'sundays'
    };
    
    Day = {DayNumber, OrdinalDay};
    
    DateExtractorYearTerm = {SpaceOrComma, Space + 'of' + Space} + Year;
    
    StrictRelative = {
        'following',
        'next',
        'coming',
        'upcoming',
        'this',
        LastNotVerb,
        'past',
        'previous',
        'current'
    };
    
    Relative = {
        'following',
        'next',
        'coming',
        'upcoming',
        'this',
        LastNotVerb,
        'past',
        'previous',
        'current',
        'the'
    };
    
    LastNotVerb = 'last' @outside (LastNegPrefix + Space + 'last');
    
    // (?<!(w(ill|ould|on\s*'\s*t)|m(ay|ight|ust)|sh(all|ould(n\s*'\s*t)?)|c(an(\s*'\s*t|not)?|ould(n\s*'\s*t)?))(\s+not)?\s+)
    LastNegPrefix = {
        'will',
        'would',
        "won't", "won ' t",
        'may',
        'might',
        'must',
        'shall',
        'should',
        "shouldn't", "shouldn ' t", "shouldn 't", "shouldn' t",
        'can',
        "can't", "can ' t", 'can not', 'cannot',
        'could',
        "couldn't", "couldn ' t", 'could not'
    };
    
    
    // ((this\s+)?past)\b
    PastPrefix = ?('this' + Space) + 'past';
    
    // ((this\s+)?((up)?coming))
    UpcomingPrefix = ?('this' + Space) + {'coming', 'upcoming'};
    
    // \b(following|next|{UpcomingPrefixRegex})\b
    NextPrefix = {
        'following',
        'next',
        UpcomingPrefix
    };
    
    // (?<msuf>(?:(in|of|on)\s+)?({RelativeMonthRegex}|{WrittenMonthRegex}))
    MonthSuffix = ?({ 'in', 'of', 'on' } + Space) + {RelativeMonth, MonthName};
    
    // (?<relmonth>((day\s+)?of\s+)?{RelativeRegex}\s+month)\b
    RelativeMonth = ?(?('day' + Space) + 'of' + Space) + Relative + Space + 'month';
    
    // (?:one|two|three|four|five|six|seven|eight|nine)
    WrittenOneToNine = { 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine' };
    
    // (?:eleven|twelve|(?:thir|four|fif|six|seven|eigh|nine)teen)
    WrittenElevenToNineteen = { 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen' };
    
    // (?:ten|twenty|thirty|fou?rty|fifty|sixty|seventy|eighty|ninety)
    WrittenTens = { 'ten', 'twenty', 'thirty', 'fourty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety' };
    
    // (?:{WrittenOneToNineRegex}|{WrittenElevenToNineteenRegex}|{WrittenTensRegex}(\s+{WrittenOneToNineRegex})?)
    WrittenNum = { WrittenOneToNine, WrittenElevenToNineteen, WrittenTens } + ?(Space + WrittenOneToNine);

    //TODO: migrate patterns
    MonthlyOrdinal = { 'first', 'second', 'third', 'fourth', 'fifth' };
    
    // {MonthRegex}\s*(the)?\s*$
    MonthEnd = MonthName + ?(Space + 'the');
    
    // ^\s*(day\s+)?of\s*{MonthRegex}
    OfMonth = ?('day' + Space) + 'of' + Space + MonthName;
    
    // ((,|\sof)?\s*({DateYearRegex}|{FullTextYearRegex}))
    YearSuffix = ?{',', Space + 'of'} + ?Space + FullTextYear;
    
    // \b((?<firsttwoyearnum>{CenturyRegex})\s+(?<lasttwoyearnum>{LastTwoYearNumRegex})\b|\b(?<firsttwoyearnum>{WrittenCenturyFullYearRegex}|{WrittenCenturyOrdinalYearRegex}\s+hundred(\s+and)?))\b
    FullTextYear = {
        Century + Space + LastTwoYearNum,
        { WrittenCenturyFullYear, WrittenCenturyOrdinalYear + Space + 'hundred' + ?(Space + 'and') }
    };
    
    // (?:(one|two)\s+thousand(\s+and)?(\s+{WrittenOneToNineRegex}\s+hundred(\s+and)?)?)
    WrittenCenturyFullYear = {'one', 'two'} + Space + 'thousand' + ?(Space + 'and') + ?(Space + WrittenOneToNine + Space + 'hundred' + ?(Space + 'and'));
    
    // (?:twenty(\s+(one|two))?|ten|eleven|twelve|thirteen|fifteen|eigthteen|(?:four|six|seven|nine)(teen)?|one|two|three|five|eight)
    WrittenCenturyOrdinalYear = {
        'twenty' + ?(Space + {'one', 'two'}),
        'ten', 'eleven', 'twelve', 'thirteen', 'fifteen', 'eigthteen',
        'four', 'six', 'seven', 'nine',
        'fourteen', 'sixteen', 'seventeen', 'nineteen',
        'one', 'two', 'three', 'five', 'eight'
    };
    
    // \b(?<century>{WrittenCenturyFullYearRegex}|{WrittenCenturyOrdinalYearRegex}(\s+hundred)?(\s+and)?)\b
    Century = { WrittenCenturyFullYear, WrittenCenturyOrdinalYear + ?(Space + 'hundred') + ?(Space + 'and') };
    
    // (?:zero\s+{WrittenOneToNineRegex}|{WrittenElevenToNineteenRegex}|{WrittenTensRegex}(\s+{WrittenOneToNineRegex})?)
    LastTwoYearNum = { 'zero' + Space + WrittenOneToNine, WrittenElevenToNineteen, WrittenTens + ?(Space + WrittenOneToNine) };

    // \b(ago|before\s+(?<day>yesterday|today))\b
    Ago = { 'ago', 'before' + ?(Space + {'yesterday', 'today'}) };
    
    // \b(?:later(?!((\s+in)?\s*{OneWordPeriodRegex})|(\s+{TimeOfDayRegex})|\s+than\b)|from now|(from|after)\s+(?<day>tomorrow|tmr|today))\b
    // TODO: complete
    Later = { 'later', 'than', 'from now', { 'from', 'after' } + Space + { 'tomorrow', 'tmr', 'today' } };

    Date = {YearMonthDay, DayMonthYear, MonthDayYear, MonthDay, LongDate};

    YearMonthDay = Year + DateDelim + {Month, MonthName} + DateDelim + Day;
    DayMonthYear = Day + DateDelim + {Month, MonthName} + DateDelim + Year;
    MonthDayYear = {Month, MonthName} + DateDelim + Day + DateDelim + Year;
    MonthDay = MonthName + Space + Day;
    LongDate = {MonthName + Space + {Day, OrdinalDay},
        {Day, OrdinalDay} + Space + ?("of" + Space) + MonthName} +
        {Space, ','} + ?Space + Year;
    YearSpan = Year + {'-', '/'} + Year;
    Year = {Num(2), Years-1800-2099} @where {
        Years-1800-2099 = {'17'*(Num, 2), '18'*(Num, 2), '19'*(Num, 2), '20'*(Num, 2)};
    };
    Month = {
        '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '01', '02', '03', '04', '05', '06', '07', '08', '09',
        '10', '11', '12'};
    DayNumber = {
        '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '01', '02', '03', '04', '05', '06', '07', '08', '09',
        '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',
        '20', '21', '22', '23', '24', '25', '26', '27', '28', '29',
        '30', '31'};
    MonthName = {
        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December',
        'Febr', 'Sept'};
    OrdinalDay = {
        '1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th',
        '10th', '11th', '12th', '13th', '14th', '15th', '16th', '17th', '18th', '19th',
        '20th', '21st', '22nd', '23rd', '24th', '25th', '26th', '27th', '28th', '29th',
        '30th', '31st',
        '1th', '2th', '3th', '21th', '22th', '31th'};
    DateDelim = {'-', '/', '.'};
}

/*  DateRegexList: 
  
   (Sunday,)? April 5 or (Sunday,)? April 5, 2016
X   DateExtractor1
    
    (Sunday,)? 6th of April
X   DateExtractor3
    
    3-23-2017
X   DateExtractor4
    
    on (Sunday,)? 1.3
X   DateExtractor6
    
    "(Sunday,)? 7/23, 2018", year part is required
X   DateExtractor7L
    
    "(Sunday,)? 7/23", year part is not required
X   DateExtractor7S
    
    23-3-2015
X   DateExtractor5
    
    on (Sunday,)? 24-12
X   DateExtractor8
    
    "(Sunday,)? 23/7, 2018", year part is required
X   DateExtractor9L
    
    "(Sunday,)? 23/7", year part is not required
X   DateExtractor9S
    
    (Sunday,)? 2015-12-23
X   DateExtractorA
*/


/* ImplicitDateList
    
    extract "12" from "on 12"
?   OnRegex
    
    extract "12th" from "on/at/in 12th"
?   RelaxedOnRegex,
    
    "the day before yesterday", "previous day", "today", "yesterday", "tomorrow"
X   SpecialDayRegex,
    
    "this Monday", "Tuesday of this week"
X   ThisRegex,
    
    "last/previous Monday", "Monday of last week"
X   LastDateRegex,
    
    "next/following Monday", "Monday of next week"
X   NextDateRegex,
    
    "Sunday", "Weds"
X   SingleWeekDayRegex,
    
    "2nd Monday of April"
X   WeekDayOfMonthRegex,
    
    "on the 12th"
X   SpecialDate,
    
    "two days from today", "five days from tomorrow"
X   SpecialDayWithNumRegex,
    
    "three Monday from now"
X   RelativeWeekDayRegex,
*/

/*

RangeConnectorSymbol = {'--', '-', '—', '——', '~', '–'};

Till = { { 'to', 'until'', 'thru', 'through' } + ?(Space + 'the'), RangeConnectorSymbol };

RangeConnector = { {'and', 'through', 'to'} + ?(Space + 'the'), RangeConnectorSymbol };

AfterNextSuffix = 'after' + ?(Space + 'the') + Space + 'next';

PreviousPrefix = {
    LastNotVerb,
    'previous',
    PastPrefix
};

ThisPrefix = {'this', 'current'};

RangePrefix = {'from', 'between'};

CenturySuffix = 'century';

ReferencePrefix = {'that', 'same'};

FutureSuffix = {
    'in the future',
    'future',
    'in the hence',
    'hence'
};

*/
