@require "Basic.Number.Generated.np";

@namespace Basic.IpAddress {
    @search @pattern Target = { IpAddressV4, IpAddressV6 };
    
    IpAddressV4 = Byte + '.' + Byte + '.' + Byte + '.' + Byte
    @where
    {
        Byte = Basic.Number.Generated.ByteRangeNumberWithZeroPadding;
    };
    
    IpAddressV6 = {
        // (({BasicIpv6Element}:){7}{BasicIpv6Element})
        [7 Element + ':'] + Element,
        // (:(:{BasicIpv6Element}){1,7})
        ':' + [1-7 ':' + Element],
        // (({BasicIpv6Element}:){1}((:{BasicIpv6Element}){1,6}))
        [1 Element + ':'] + [1-6 ':' + Element],
        // (({BasicIpv6Element}:){2}((:{BasicIpv6Element}){1,5}))
        [2 Element + ':'] + [1-5 ':' + Element],
        // (({BasicIpv6Element}:){3}((:{BasicIpv6Element}){1,4}))
        [3 Element + ':'] + [1-4 ':' + Element],
        // (({BasicIpv6Element}:){4}((:{BasicIpv6Element}){1,3}))
        [4 Element + ':'] + [1-3 ':' + Element],
        // (({BasicIpv6Element}:){5}((:{BasicIpv6Element}){1,2}))
        [5 Element + ':'] + [1-2 ':' + Element],
        // (({BasicIpv6Element}:){6}((:{BasicIpv6Element}){1}))
        [6 Element + ':'] + [1 ':' + Element],
        // (({BasicIpv6Element}:){7}(:))
        [7 Element + ':'] + ':',
        // \B::\B|\B:(:{BasicIpv6Element}){1,7}\b|\b({BasicIpv6Element}:){1,7}:\B - неточно, т.к. не проверяется граница слова
        '::', [1-7 Element + ':'] + ':'
    }
    @where
    {
        // BasicIpv6Element
        // ([\da-fA-F]{1,4}) - неточно, т.к. не проверяется HEX
        Element = { Num(1-4), AlphaNum(1-4), NumAlpha(1-4), Alpha(1-4) }; 
    };
}
